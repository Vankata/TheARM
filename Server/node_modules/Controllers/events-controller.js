var Q = require("q");
var serverContext = require("./../../models/server-context");


module.exports = 
{
    createEvent : function (newEvent, ownerId) {
        var deferred = Q.defer();
        
		newEvent.eventId = 0;
		serverContext().then(function(db){
		    db.models.event.create(newEvent, function(error, createdEvent) {
                if(error) {
                    deferred.reject(error);
                }

                db.models.user.get(ownerId, function (usrErr, user) {
                    if(usrErr) {
                        deferred.reject(usrErr);
                    }

                    user.addEvents(createdEvent, function (addErr) {
                        if(addErr) {
                            deferred.reject(addErr);
                        }

                        console.log("Created events: " + JSON.stringify(createdEvent));
                        createdEvent.setOwner(user, function (setOwnerErr) {
                            if(setOwnerErr) {
                                deferred.reject(setOwnerErr);
                            }

                            createdEvent.getRules(function(rulesErr, rules) {
                                if(rulesErr) {
                                    deferred.reject(rulesErr);
                                }

                                createdEvent.rules = rules;
                                deferred.resolve(createdEvent);
                            });
                        });
                    });

		        });
		    });
		}, function(error) {
		    deferred.reject(error);
		});
		
		return deferred.promise;
    },
    joinEvent: function (username, eventId) {
        var deferred = Q.defer();

        serverContext().then(function (db) {

            db.models.user.find({ displayName: username }, function (error, users) {
				console.log(users[0]);
                var user = users[0];
                if (error || !users) {
                    deferred.reject(error);
                }

                db.models.event.get(eventId, function (err, event) {
                    if (err || !event) {
                        deferred.reject(err);
                    }

                    user.addEvents(event);
                    user.save();
                    deferred.resolve();
                });
            });

        });

        return deferred.promise;
    },
    leaveEvent: function (username, eventId) {
        var deferred = Q.defer();

        serverContext().then(function (db) {

            db.models.user.find({ displayName: username }, function (error, users) {
                var user = users[0];
                if (error || !users) {
                    deferred.reject(error);
                }

                db.models.event.get(eventId, function (err, event) {
                    if (err || !event) {
                        deferred.reject(err);
                    }

                    user.removeEvents(event);
                    user.save();
                    deferred.resolve();
                });
            });

        });

        return deferred.promise;
    },
    deleteEvent: function (eventId) {
        var deferred = Q.defer();

        serverContext().then(function (db) {

            db.models.event.find({ eventId : eventId }).remove(function(err){
                if (err) {
                    deferred.reject(err);
                }

                deferred.resolve();
            });

        });

        return deferred.promise;
    }
};