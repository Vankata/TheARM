var Q = require("q");
var serverContext = require("./../../models/server-context");


module.exports = 
{
    createEvent : function (newEvent) {
        var deferred = Q.defer();
        
		newEvent.eventId = 0;
		serverContext().then(function(db){
		    db.models.event.create(newEvent, function(error) {
                if(error) {
                    deferred.reject(error);
                }
		        
                deferred.resolve(newEvent);
		    });
		}, function(error) {
		    deferred.reject(error);
		});
		
		return deferred.promise;
    },
    joinEvent: function (username, eventId) {
        var deferred = Q.defer();

        serverContext().then(function (db) {

            db.models.user.find({ displayName: username }, function (error, users) {
                var user = users[0];
                if (error || !users) {
                    deferred.reject(error);
                }

                db.models.event.get(eventId, function (err, event) {
                    if (err || !event) {
                        deferred.reject(err);
                    }

                    user.addEvents(event);
                    user.save();
                    deferred.resolve();
                });
            });

        });

        return deferred.promise;
    },
    leaveEvent: function (username, eventId) {
        var deferred = Q.defer();

        serverContext().then(function (db) {

            db.models.user.find({ displayName: username }, function (error, users) {
                var user = users[0];
                if (error || !users) {
                    deferred.reject(error);
                }

                db.models.event.get(eventId, function (err, event) {
                    if (err || !event) {
                        deferred.reject(err);
                    }

                    user.removeEvents(event);
                    user.save();
                    deferred.resolve();
                });
            });

        });

        return deferred.promise;
    },
    deleteEvent: function (eventId) {
        var deferred = Q.defer();

        serverContext().then(function (db) {

            db.models.event.find({ eventId : eventId }).remove(function(err){
                if (err) {
                    deferred.reject(err);
                }

                deferred.resolve();
            });

        });

        return deferred.promise;
    }
};