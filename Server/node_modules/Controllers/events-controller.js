var Q = require("q");
var serverContext = require("./../../models/server-context");


module.exports = 
{
    createEvent : function (newEvent, companyName) {
		var result = "OK";
		console.log('eventId ' + newEvent.eventId);
		console.log('description ' + newEvent.description);
		console.log('minUsers ' + newEvent.minUsers);
		console.log('maxUsers ' + newEvent.maxUsers);
		console.log('startTime ' + newEvent.startTime);
		console.log('endTime ' + newEvent.endTime);
		
		console.log(JSON.stringify(newEvent));
		serverContext().then(function(models){
			models.company.find({name: companyName}, 1, function(error, foundedCompanies) {
				var company = null;
				if (foundedCompanies) {
					company = foundedCompanies[0];
				}
				console.log("COMPANY: " + JSON.stringify(company));
				if (company) {
					company.getUsers(function(error, users) {
						console.log("USERS: " + users);
						console.log("EVENT: " + newEvent);
						models.event.create([newEvent], function(error, insertedEvent) {
							console.log("INSERTED " + insertedEvent);
							for (var index in users) {
								var user = users[index];
								user.addEvents([insertedEvent], function(err, items) {});
							}
						});
					});
				}
			});
		}, function(error) {
			result = "Server error - " + error;
		});
		return result;
    },
    joinEvent: function (username, eventId) {
        var deferred = Q.defer();

        serverContext().then(function (db) {

            db.models.user.find({ displayName: username }, function (error, users) {
                var user = users[0];
                if (error || !users) {
                    deferred.reject(error);
                }

                db.models.event.get(eventId, function (err, event) {
                    if (err || !event) {
                        deferred.reject(err);
                    }

                    user.addEvents(event);
                    user.save();
                    deferred.resolve();
                });
            });

        });

        return deferred.promise;
    },
    leaveEvent: function (username, eventId) {
        var deferred = Q.defer();

        serverContext().then(function (db) {

            db.models.user.find({ displayName: username }, function (error, users) {
                var user = users[0];
                if (error || !users) {
                    deferred.reject(error);
                }

                db.models.event.get(eventId, function (err, event) {
                    if (err || !event) {
                        deferred.reject(err);
                    }

                    user.removeEvents(event);
                    user.save();
                    deferred.resolve();
                });
            });

        });

        return deferred.promise;
    },
    deleteEvent: function (eventId) {
        var deferred = Q.defer();

        serverContext().then(function (db) {

            db.models.event.find({ eventId : eventId }).remove(function(err){
                if (err) {
                    deferred.reject(err);
                }

                deferred.resolve();
            });

        });

        return deferred.promise;
    }
};