var dataContext = require('../../models/server-context.js');
var Q = require("q");
require('q-foreach')(Q);

module.exports = {
    getAll: function () {
        var deferred = Q.defer();

        dataContext().then(function (db) {
            db.models.company.find({}, function (error, results) {
                if (error) {
                    deferred.reject(error);
                }

                if (results && results.length > 0) {
                    deferred.resolve(results);
                }
            });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    },
    getResourcesByCompany: function (companyId) {
        var deferred = Q.defer();

        dataContext().then(function (db) {
            db.models.resource
                .findByCompany({ companyId: companyId }, function (error, results) {
                    if (error) {
                        deferred.reject(error);
                    }

                    deferred.resolve(results);
                });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    },
    getResourceDataByCompany: function (companyId, resourceId) {
        var deferred = Q.defer();

        dataContext().then(function (db) {
            db.models.resource
                .findByCompany({ companyId: companyId }, function (error, results) {
                    if (error) {
                        deferred.reject(error);
                    }

                    deferred.resolve(results.find(function (res) {
                        return res.resourceId == resourceId
                    }));
                });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    },
    getEventsByCompany: function (companyId) {
        var deferred = Q.defer();

        dataContext().then(function (db) {
            db.models.company.get(companyId, function (cmpErr, company) {
                company.getResources(function (resErr, resources) {

                    Q.forEach(resources, function(res) {
                        var df = Q.defer();

                        res.getEvents(function (evErr, events) {
                            var allEvents = [];

                            if(evErr) {
                                df.reject(evErr);
                            }

                            for(var i = 0; i < events.length; i++) {
                                allEvents.push(events[i]);
                            }

                            df.resolve(allEvents);
                        });

                        return df.promise;
                    }).then(function (events) {

                        return Q.forEach(events, function (ev) {
                            var df = Q.defer();

                            ev.getUsers(function (usrErr, users) {
                                if(usrErr) {
                                    df.reject(usrErr);
                                }

                                ev.users = users;

                                df.resolve(ev);
                            });

                            return df.promise;
                        });
                    }, function (err) {
                        deferred.reject(err);
                    }).then(function (events) {
                        deferred.resolve(events);
                    });
                });
            });

        });

        return deferred.promise;
    },
    getEventDataByCompany: function (companyId, eventId) {
        var deferred = Q.defer();

        dataContext().then(function (db) {
            db.driver.execQuery(
                "SELECT * FROM event e INNER JOIN resource r on e.resource_resourceId = r.resourceId WHERE r.company_companyId = ? AND e.eventId = ?",
                [companyId, eventId],
                function (err, data) {
                    if (err) {
                        deferred.reject(err);
                    }

                    deferred.resolve(data[0]);
                });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    }
};