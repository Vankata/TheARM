var dataContext = require('../../models/server-context.js');
var Q = require("q");
require('q-foreach')(Q);

module.exports = {
    getAll: function () {
        var deferred = Q.defer();

        dataContext().then(function (db) {
            db.models.company.find({}, function (error, results) {
                if (error) {
                    deferred.reject(error);
                }

                if (results && results.length > 0) {
                    deferred.resolve(results);
                }
            });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    },
    getResourcesByCompany: function (companyId) {
        var deferred = Q.defer();

        dataContext().then(function (db) {
            db.models.resource
                .findByCompany({ companyId: companyId }, function (error, results) {
                    if (error) {
                        deferred.reject(error);
                    }
                    Q.forEach(results, function (res) {
                        var df = Q.defer();

                        res.getRules(function (ruleErr, rules) {
                            if (ruleErr) {
                                df.reject(ruleErr);
                            }

                            res.rules = rules;

                            df.resolve(res);
                        });

                        return df.promise;
                    }).then(function (resources) {
                        deferred.resolve(resources);
                    }, function (err) {
                        deferred.reject(err);
                    });
                });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    },
    getResourceDataByCompany: function (companyId, resourceId) {
        var deferred = Q.defer();

        dataContext().then(function (db) {
            db.models.resource
                .findByCompany({ companyId: companyId }, function (error, results) {
                    if (error) {
                        deferred.reject(error);
                    }

                    if (results && results.length > 0) {
                        db.models.resource.get(resourceId, function (resErr, res) {
                            if (resErr) {
                                deferred.reject(resErr);
                            }

                            res.getRules(function (ruleErr, rules) {
                                if (ruleErr) {
                                    deferred.reject(ruleErr);
                                }

                                res.rules = rules;

                                deferred.resolve(res);
                            });
                        });
                    }
                });
        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    },
    getEventsByCompany: function (companyId) {
        var deferred = Q.defer();

        dataContext().then(function (db) {
            db.models.company.get(companyId, function (cmpErr, company) {
                company.getResources(function (resErr, resources) {

                    Q.forEach(resources, function (res) {
                        var df = Q.defer();
                        res.getEvents(function (evErr, events) {
							//console.log(events);
							//console.log(evErr);
                            var allEvents = [];

                            if (evErr) {
                                df.reject(evErr);
                            }

                            for (var i = 0; i < events.length; i++) {
								var date = new Date(events[i].startTime);
								var current = new Date();
								if(date >= current)
								{
									allEvents.push(events[i]);
								}
                            }

                            df.resolve(allEvents);
                        });

                        return df.promise;
                    }).then(function (events) {
						if(events.length > 0){
							return Q.forEach(events, function (ev) {
								var df = Q.defer();
	
								ev.getUsers(function (usrErr, users) {
									if (usrErr) {
										df.reject(usrErr);
									}
	
									ev.users = users;
	
									ev.getOwner(function (getOwnrErr, owner) {
										if (getOwnrErr) {
											df.reject(getOwnrErr);
										}
	
										ev.owner = owner;
	
										ev.getRules(function (rulesErr, rules) {
											if (rulesErr) {
												df.reject(rulesErr);
											}
	
											ev.rules = rules;
											df.resolve(ev);
										});
									});
	
								});
	
								return df.promise;
							});
						}
						else{
							var df = Q.defer();
							df.resolve([]);
							return df.promise;
						}
                    }, function (err) {
                        deferred.reject(err);
                    }).then(function (events) {
                        deferred.resolve(events);
                    });
                });
            });

        });

        return deferred.promise;
    },
    getEventDataByCompany: function (companyId, eventId) {
        var deferred = Q.defer();

        dataContext().then(function (db) {
            db.models.event.get(eventId, function (evErr, ev) {
                if (evErr) {
                    deferred.reject(evErr);
                }

                ev.getUsers(function (usrErr, users) {
                    if (usrErr) {
                        deferred.reject(usrErr);
                    }

                    ev.users = users;

                    ev.getOwner(function (getOwnrErr, owner) {
                        if (getOwnrErr) {
                            deferred.reject(getOwnrErr);
                        }

                        ev.owner = owner;

                        ev.getRules(function (rulesErr, rules) {
                            if (rulesErr) {
                                deferred.reject(rulesErr);
                            }

                            ev.rules = rules;
                            deferred.resolve(ev);
                        });
                    });

                });

            });

        }, function (error) {
            deferred.reject(error);
        });

        return deferred.promise;
    }
};