var datacontext = require('../../models/server-context.js');
var jsonBuilder = require('../../utils/jsonBuilder.js');
var hasher = require('password-hash');
var Q = require("q");

module.exports =
{
    loginUser: function (username, password, token) {
        var context = datacontext();

        var deferred = Q.defer();

        context.then(function (db) {
            db.models.user.find({ displayName: username }, function (error, results) {
                if (error) {
                    var objectToReturn = jsonBuilder.buildJsonObject("status", "fail");
                    jsonBuilder.addJsonValue(objectToReturn, "error", error);
                    deferred.reject(objectToReturn);
                }

                if (results.length > 0) {
                    if (hasher.verify(password, results[0].password)) {
                        console.log("Login successful");
                        results[0].token = token;
                        results[0].save(function (error) {
                            if (error) {
                                deferred.reject(error);
                            }
                        });
                        var objectToReturn = jsonBuilder.buildJsonObject("status", "success");
                        jsonBuilder.addJsonValue(objectToReturn, "email", results[0].email);
                        jsonBuilder.addJsonValue(objectToReturn, "userId", results[0].userId);
                        jsonBuilder.addJsonValue(objectToReturn, "displayName", results[0].displayName);
                        jsonBuilder.addJsonValue(objectToReturn, "os", results[0].os);
                        jsonBuilder.addJsonValue(objectToReturn, "token", results[0].token);
                        deferred.resolve(objectToReturn);
                    }
                }
                var objectToReturn = jsonBuilder.buildJsonObject("status", "fail");
                deferred.resolve(objectToReturn);
            });
        }, function (error) {
            var objectToReturn = jsonBuilder.buildJsonObject("status", "fail");
            jsonBuilder.addJsonValue(objectToReturn, "error", error);
            deferred.reject(objectToReturn);
        });

        return deferred.promise;
    },

    registerUser: function (username, password, token, email, os) {
        var context = datacontext();

        var deferred = Q.defer();

        context.then(function (db) {
            db.models.user.create(
            {
                userId: 0,
                email: email,
                password: hasher.generate(password),
                os: os,
                displayName: username,
                token: token
            }, function (error, item) {
                if (error) {
                    var objectToReturn = jsonBuilder.buildJsonObject("status", "fail");
                    jsonBuilder.addJsonValue(objectToReturn, "error", error);
                    deferred.reject(objectToReturn);
                }
                else {
                    console.log("Registered user: " + username);
					
					var objectToReturn = jsonBuilder.buildJsonObject("status", "success");
					jsonBuilder.addJsonValue(objectToReturn, "email", email);
					jsonBuilder.addJsonValue(objectToReturn, "userId", item.userId);
					jsonBuilder.addJsonValue(objectToReturn, "displayName", username);
					jsonBuilder.addJsonValue(objectToReturn, "os", os);
					jsonBuilder.addJsonValue(objectToReturn, "token", token);
					jsonBuilder.addJsonValue(objectToReturn, "companyId", 1);
					console.log("Getting Company");
					db.models.company.get(1, function (addErr, company) {
                        if(addErr) {
                            deferred.reject(addErr);
                        }
						console.log("Company " + company);
						company.addUsers(item);
						deferred.resolve(objectToReturn);
					});
                }
            });
        }, function (eror) {
            var objectToReturn = jsonBuilder.buildJsonObject("status", "fail");
            jsonBuilder.addJsonValue(objectToReturn, "error", error);
            deferred.reject(objectToReturn);
        });

        return deferred.promise;
    }
};